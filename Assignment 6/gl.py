import numpy as np

# 10-th order Butcher tableau (in quad precision)
A5 = np.array([
     0.5923172126404727187856601017997934066E-1,
    -1.9570364359076037492643214050884060018E-2,
     1.1254400818642955552716244215090748773E-2,
    -0.5593793660812184876817721964475928216E-2,
     1.5881129678659985393652424705934162371E-3,
     1.2815100567004528349616684832951382219E-1,
     1.1965716762484161701032287870890954823E-1,
    -2.4592114619642200389318251686004016630E-2,
     1.0318280670683357408953945056355839486E-2,
    -2.7689943987696030442826307588795957613E-3,
     1.1377628800422460252874127381536557686E-1,
     2.6000465168064151859240589518757397939E-1,
     1.4222222222222222222222222222222222222E-1,
    -2.0690316430958284571760137769754882933E-2,
     4.6871545238699412283907465445931044619E-3,
     1.2123243692686414680141465111883827708E-1,
     2.2899605457899987661169181236146325697E-1,
     3.0903655906408664483376269613044846112E-1,
     1.1965716762484161701032287870890954823E-1,
    -0.9687563141950739739034827969555140871E-2,
     1.1687532956022854521776677788936526508E-1,
     2.4490812891049541889746347938229502468E-1,
     2.7319004362580148889172820022935369566E-1,
     2.5888469960875927151328897146870315648E-1,
     0.5923172126404727187856601017997934066E-1
]).reshape([5,5])

B5 = np.array([
     1.1846344252809454375713202035995868132E-1,
     2.3931433524968323402064575741781909646E-1,
     2.8444444444444444444444444444444444444E-1,
     2.3931433524968323402064575741781909646E-1,
     1.1846344252809454375713202035995868132E-1
])

# 10-th order Gauss-Legendre step
def gl10(f, y, dt):
    n = y.size;
    g = np.zeros([5,n])
    for k in range(0,16):
        g = np.matmul(A5, g)
        for i in range(0,5):
            g[i] = f(y + g[i]*dt)
    return y + np.dot(B5, g)*dt
